[{
	"title": "Quiz on Views",
	"activityType": "quiz",
	"questions": [{
			"questionType": "mcq",
			"questionText": " Consider the following base tables. Capitalized attributes are primary keys. All non-key attributes are permitted to be NULL. <br> <code>MovieStar(NAME, address, gender, birthdate) <br>  MovieExecutive(LICENSE#, name, address, netWorth)<br>   Studio(NAME, address, presidentLicense#)</code><br> Each of the choices describes, in English, a view that could be created with a query on these tables. Which one can be written as a SQL view that is updatable according to the SQL standard? ",
			"options": [{
					"option": "A view \"Birthdays\" containing a list of birthdates (no duplicates) belonging to at least one movie star.",
					"correct": "False"
				},

				{
					"option": "A view \"GenderBalance\" containing the number of male and number of female movie stars.",
					"correct": "False"
				},

				{
					"option": "A view \"NewYorkWealth\" containing the average net worth of movie executives whose address contains \"New York\".",
					"correct": "False"
				},

				{
					"option": "A view \"RichExecNums\" containing the license number and net worth of all executives with a net worth of at least $10,000,000. ",
					"correct": "True"
				}

			],
			"feedback":"In order to be updatable according to the SQL standard, a view must:<br><ul> <li>Have only one table T in its top-level FROM clause</li><br><li>Not use SELECT DISTINCT in its top-level FROM clause</li><br><li>Include all attributes from T that do not permit NULLs</li><br><li>Not refer to T in subqueries</li><br><li>Not use GROUP BY or aggregation</li></ul>"
		},

		{
			"questionType": "mcq",
			"questionText": " Consider the following schema: <br> <code> Book(ISBN, title, year) // ISBN and title cannot be NULL<br>  Author(ISBN, name) // ISBN and name cannot be NULL </code> <br>and the following view definition over this schema:<br> <code>  Create View V as <br>    Select Book.ISBN, count(*)<br>    From Book, Author<br>    Where Book.ISBN = Author.ISBN<br>    And Author.name Like 'A%'<br>   And Book.year > 2000<br>   Group By Book.ISBN </code> <br>This view is not updatable according to the SQL standard, for a number of reasons. Which of the following is a valid reason for the view being non-updatable according to the standard? ",
			"options": [{
					"option": "The condition Book.year > 2000",
					"correct": "False"
				},

				{
					"option": "NULL values are not permitted in Book.title",
					"correct": "True"
				},

				{
					"option": "NULL values are not permitted in Book.ISBN",
					"correct": "False"
				},

				{
					"option": "Book.year is omitted from the view",
					"correct": "False"
				}

			],
			"feedback":"In order to be updatable according to the SQL standard, a view must:<br><ul> <li>Have only one table T in its top-level FROM clause</li><br><li>Not use SELECT DISTINCT in its top-level FROM clause</li><br><li>Include all attributes from T that do not permit NULLs</li><br><li>Not refer to T in subqueries</li><br><li>Not use GROUP BY or aggregation</li></ul>"
		},

		{
			"questionType": "mcq",
			"questionText": " [Q3] Suppose a table T(A,B,C) has the following tuples: (1,1,3), (1,2,3), (2,1,4), (2,3,5), (2,4,1), (3,2,4), and (3,3,6). Consider the following view definition: <br> <code>Create View V as <br>    Select A+B as D, C <br>     From T</code> <br> Consider the following query over view V: <br> <code>  Select D, sum(C)<br>  From V<br>   Group By D<br>   Having Count(*) <> 1</code><br>Which of the following tuples is in the query result? ",
			"options": [{
					"option": "(3,5)",
					"correct": "False"
				},

				{
					"option": "(5,7))",
					"correct": "False"
				},

				{
					"option": "(6,7)",
					"correct": "True"
				},

				{
					"option": "(3,12)",
					"correct": "False"
				}

			],
			"feedback":"First compute the tuples in V(D,C) based on the tuples in T. V contains: {(2,3), (3,3), (3,4), (5,5), (6,1), (5,4), (6,6)}. In the query over V there are grops for D = 2, 3, 5, and 6. All groups pass the Having clause except D=2. Sum the C attributes in each of the remaining groups to get the final result: {(3,7), (5,9), (6,7)}."
		}


	]
}]